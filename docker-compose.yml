services:
  # PostgreSQL Database for Airflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  # Main Airflow service - webserver and scheduler in one
  airflow:
    build: .
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      # Java and Spark configuration - JAVA_HOME detected dynamically in code
      SPARK_HOME: /home/airflow/.local/lib/python3.11/site-packages/pyspark
      PYSPARK_PYTHON: python3
      PYSPARK_DRIVER_PYTHON: python3
      SPARK_LOCAL_IP: 127.0.0.1
      SPARK_DRIVER_MEMORY: 512m
      SPARK_EXECUTOR_MEMORY: 512m
      SPARK_DRIVER_HOST: 127.0.0.1
      PYTHONPATH: /opt/airflow/src
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./input:/opt/airflow/input
      - output-volume:/opt/airflow/output  # Use Docker volume instead of bind mount
      - ./src:/opt/airflow/src
    user: "0:0"  # Run as root to handle Windows volume permissions
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    command: >
      bash -c "
        rm -f /opt/airflow/output/properties.duckdb* &&
        chown -R airflow:root /opt/airflow/output /opt/airflow/logs /opt/airflow/input &&
        chmod -R 777 /opt/airflow/output /opt/airflow/logs /opt/airflow/input &&
        su airflow -c 'airflow db init' &&
        su airflow -c 'airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin' || true &&
        su airflow -c 'airflow webserver --port 8080' &
        su airflow -c 'airflow scheduler'
      "

  # Standalone service to run the pipeline without Airflow (optional)
  pipeline-standalone:
    build: .
    profiles:
      - standalone
    volumes:
      - ./input:/opt/airflow/input
      - output-volume:/opt/airflow/output  # Use Docker volume instead of bind mount
      - ./src:/opt/airflow/src
    user: "0:0"  # Run as root to handle Windows volume permissions
    environment:
      PYTHONPATH: "/opt/airflow/src"
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      SPARK_HOME: /opt/airflow/.local/lib/python3.11/site-packages/pyspark
    command: >
      bash -c "
        rm -f /opt/airflow/output/properties.duckdb* &&
        chown -R airflow:root /opt/airflow/output /opt/airflow/input &&
        chmod -R 777 /opt/airflow/output /opt/airflow/input &&
        su airflow -c 'python /opt/airflow/src/data_pipeline.py'
      "

  # Helper service to copy only .duckdb files from Docker volume to local directory
  copy-output:
    image: alpine:latest
    depends_on:
      - airflow
    volumes:
      - output-volume:/source
      - ./output:/dest
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Starting file copy watcher...' &&
        while true; do
          if find /source -name '*.duckdb' 2>/dev/null | grep -q .; then
            echo 'DuckDB files found, copying...' &&
            find /source -name '*.duckdb' -exec cp -f {} /dest/ \\; 2>/dev/null &&
            echo 'Copy completed.'
          else
            echo 'No .duckdb files found, waiting...'
          fi
          sleep 30
        done
      "

volumes:
  postgres-db-volume:
  output-volume:  # Docker volume for output files